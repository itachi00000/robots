{"version":3,"sources":["redux/robots/robotsActionTypes.js","redux/robots/robotsReducer.js","redux/rootReducer.js","redux/store.js","serviceWorker.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.jsx","redux/robots/robotsAction.js","index.jsx"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","combineReducers","searchRobots","state","action","type","payload","requestRobots","middlewares","createLogger","thunk","store","createStore","rootReducer","applyMiddleware","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","Card","name","email","id","className","src","alt","CardList","map","user","key","SearchBox","searchChange","placeholder","onChange","Scroll","children","style","border","ErrorBoundry","props","hasError","this","setState","React","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","dispatch","event","text","target","value","fetch","response","json","data","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.66a83aac.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './robotsActionTypes';\r\n\r\n// import robotData from '../../robots';\r\n\r\nconst initialStateSearch = {\r\n  searchField: ''\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return { ...state, error: action.payload, isPending: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\n// reducers\r\nimport { searchRobots, requestRobots } from './robots/robotsReducer';\r\n\r\nexport default combineReducers({\r\n  searchRobots,\r\n  requestRobots\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\n// middlewares\r\nconst logger = createLogger();\r\nconst middlewares = [thunk]; // thunk first??\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  middlewares.push(logger);\r\n}\r\n\r\n// reducers\r\n// const rootReducer = combineReducers({ robots.searchRobots, robots.requestRobots });\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nfunction Card({ name, email, id }) {\r\n  return (\r\n    <div className=\"bg-blue dib br3 pa3 ma2 grow\">\r\n      <img\r\n        src={`https://robohash.org/${id}?200x200&set=set3`}\r\n        alt={`robot ${id}`}\r\n      />\r\n      <div>\r\n        <h2>\r\n          {id}. {name}\r\n        </h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div>\r\n      {robots.map(user => {\r\n        return (\r\n          <Card\r\n            key={`user-${user.id}`}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction SearchBox({ searchChange }) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nfunction Scroll({ children }) {\r\n  return (\r\n    <div\r\n      style={{\r\n        border: '1px solid black'\r\n        // overflowY: 'scroll',\r\n        // height: '625px'\r\n      }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    const { children } = this.props;\r\n\r\n    if (hasError) {\r\n      return <h1>Oooops. That is not good!</h1>;\r\n    }\r\n    return children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\n// components\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// data (if offline)\r\n// import robotData from './robots';\r\n\r\n// redux or react-redux related\r\nimport { setSearchField, requestRobots } from '../redux/robots/robotsAction';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      searchField,\r\n      onSearchChange,\r\n      robots,\r\n      isPending,\r\n      error\r\n    } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    if (isPending) {\r\n      return <h1 className=\"tc f1\">Loading</h1>;\r\n    }\r\n\r\n    return (\r\n      <div className=\"tc\">\r\n        {!isPending && error ? (\r\n          <h1 className=\"tc f1 red\">ERROR! </h1>\r\n        ) : (\r\n          <h1 className=\"f1\">Success! - Robots React</h1>\r\n        )}\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './robotsActionTypes';\r\n\r\n// const localUrl = 'http://localhost:3000/robots'\r\nconst url = 'https://jsonplaceholder.typicode.com/users';\r\n\r\nexport const setSearchField = text => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({\r\n    type: REQUEST_ROBOTS_PENDING\r\n  });\r\n  fetch(url)\r\n    .then(response => response.json())\r\n    .then(data =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n      })\r\n    )\r\n    .catch(error =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: error\r\n      })\r\n    );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n//\r\nimport 'tachyons';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n//\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}
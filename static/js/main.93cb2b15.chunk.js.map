{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/robots.js","containers/App.jsx","action.jsx","constants.jsx","serviceWorker.js","reducers.jsx","index.jsx"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","this","setState","React","Component","robotData","username","App","fetch","then","response","json","users","catch","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","length","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","initialState","store","createStore","action","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.93cb2b15.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Card({ name, email, id }) {\r\n  return (\r\n    <div className=\"bg-blue dib br3 pa3 ma2 grow\">\r\n      <img\r\n        src={`https://robohash.org/${id}?200x200`}\r\n        alt={`robot ${id}`}\r\n      />\r\n      <div>\r\n        <h2>\r\n          {id}. {name}\r\n        </h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({ robots }) {\r\n  return (\r\n    <div className=\"\">\r\n      {robots.map(user => {\r\n        return (\r\n          <Card\r\n            key={`user-${user.id}`}\r\n            id={user.id}\r\n            name={user.name}\r\n            email={user.email}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction SearchBox({searchChange}) {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"search robots...\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nfunction Scroll(props) {\r\n  return (\r\n    <div style={{\r\n      overflowY: 'scroll', \r\n      border: '1px solid black', \r\n      height: '625px' \r\n    }}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops. That is not good!</h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","const robotData = [\r\n  {\r\n    id: 1,\r\n    name: 'John Doe',\r\n    username: 'John',\r\n    email: 'john@email.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Jane Doe',\r\n    username: 'Jane',\r\n    email: 'jane@email.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Joe Doe',\r\n    username: 'Joe',\r\n    email: 'joe@email.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Juan Doe',\r\n    username: 'Juan',\r\n    email: 'juan@email.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Jack Doe',\r\n    username: 'Jack',\r\n    email: 'jack@email.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Jill Doe',\r\n    username: 'Jill',\r\n    email: 'jill@email.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Junjun Doe',\r\n    username: 'Junjun',\r\n    email: 'junjun@email.com'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Jenny Doe',\r\n    username: 'Jenny',\r\n    email: 'jenny@email.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Jana Doe',\r\n    username: 'Jana',\r\n    email: 'jana@email.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Jennifer Doe',\r\n    username: 'Jennifer',\r\n    email: 'jennifer@email.com'\r\n  }\r\n];\r\nexport default robotData;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\n\r\n// components\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\n// data (if offline)\r\nimport robotData from './robots';\r\n\r\n// redux or react-redux related\r\nimport { setSearchField } from '../action';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchField\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n  };\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      robots: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }))\r\n      // when error (offline), use the 'robots.js' as data\r\n      .catch(() => this.setState({ robots: robotData }));\r\n  }\r\n\r\n  render() {\r\n    const { robots } = this.state;\r\n    const { searchField, onSearchChange } = this.props;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    if (!robots.length) {\r\n      return <h1 className=\"tc f1\">Loading</h1>;\r\n    }\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">Robots React</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nexport const setSearchField = text => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n  };\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD } from './constants';\r\n\r\nconst initialState = {\r\n  searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchField: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst store = createStore(searchRobots);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}